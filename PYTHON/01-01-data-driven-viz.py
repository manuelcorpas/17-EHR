#!/usr/bin/env python3
"""
Data-Driven Research Gap Visualizations - 25 DISEASES VERSION
=============================================================

Uses your actual research gap data files to create publication-ready visualizations.
Reads directly from the CSV files generated by 01-00-research-gap-discovery.py

UPDATED FOR 25-DISEASE EXPANSION:
- Reads files with "_25diseases" suffix
- Handles expanded disease categories
- Enhanced visualizations for comprehensive coverage

Files required:
- ANALYSIS/01-00-RESEARCH-GAP-DISCOVERY/research_gaps_comprehensive_25diseases.csv
- ANALYSIS/01-00-RESEARCH-GAP-DISCOVERY/research_effort_by_disease_25diseases.csv
- ANALYSIS/01-00-RESEARCH-GAP-DISCOVERY/gap_analysis_summary_25diseases.json

Usage: 
    python PYTHON/01-01-data-driven-viz-25diseases.py

Output: Publication-ready PNG/PDF files in ANALYSIS/01-01-DATA-VIZ/
"""

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns
from pathlib import Path
import json
import logging

# Set up logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# Publication-quality settings
plt.rcParams.update({
    'font.size': 12,
    'axes.titlesize': 16,
    'axes.labelsize': 14,
    'xtick.labelsize': 11,
    'ytick.labelsize': 11,
    'legend.fontsize': 11,
    'figure.titlesize': 18,
    'font.family': 'sans-serif',
    'font.sans-serif': ['Arial', 'DejaVu Sans'],
    'figure.dpi': 300,
    'savefig.dpi': 300,
    'savefig.bbox': 'tight',
    'savefig.facecolor': 'white'
})

def load_research_gap_data():
    """Load the research gap analysis data from actual output files (25 diseases)."""
    
    # File paths - match what 01-00-research-gap-discovery.py actually creates (25 diseases)
    gap_file = 'ANALYSIS/01-00-RESEARCH-GAP-DISCOVERY/research_gaps_comprehensive_25diseases.csv'
    effort_file = 'ANALYSIS/01-00-RESEARCH-GAP-DISCOVERY/research_effort_by_disease_25diseases.csv'
    summary_file = 'ANALYSIS/01-00-RESEARCH-GAP-DISCOVERY/gap_analysis_summary_25diseases.json'
    
    # Check if files exist
    missing_files = []
    for file in [gap_file, effort_file, summary_file]:
        if not Path(file).exists():
            missing_files.append(file)
    
    if missing_files:
        print(f"Missing files:")
        for file in missing_files:
            print(f"   {file}")
        print("\nPlease run 01-00-research-gap-discovery.py first.")
        return None, None, None
    
    # Load data
    print(f"\nLoading data files from 25-disease analysis...")
    try:
        gap_df = pd.read_csv(gap_file)
        effort_df = pd.read_csv(effort_file)
        
        # Load summary JSON
        with open(summary_file, 'r') as f:
            summary_data = json.load(f)
        
        print(f"Data loaded successfully:")
        print(f"   • {len(gap_df)} diseases analyzed (25-disease expansion)")
        print(f"   • {len(effort_df)} disease areas with research")
        print(f"   • Analysis date: {summary_data.get('analysis_date', 'Unknown')}")
        print(f"   • Total DALYs: {summary_data.get('total_dalys_analyzed', 'Unknown'):.1f}M")
        print(f"   • Data sources: {summary_data.get('data_sources_count', 'Unknown')}")
        
        return gap_df, effort_df, summary_data
        
    except Exception as e:
        print(f"Error loading data files: {e}")
        return None, None, None

def create_crisis_visualization(gap_df, output_prefix='research_gap_25diseases'):
    """
    Create the main crisis visualization with improved annotation positioning for 25 diseases.
    """
    
    # Create figure
    fig, ax = plt.subplots(figsize=(18, 14))
    
    # Define critical threshold (gap score > 80)
    critical_threshold = 80
    critical_mask = gap_df['research_gap_score'] > critical_threshold
    
    # Color coding
    colors = ['#d63031' if score > critical_threshold else '#0984e3' 
              for score in gap_df['research_gap_score']]
    
    # Bubble sizes proportional to DALYs
    sizes = gap_df['dalys_millions'] * 6  # Slightly smaller for 25 diseases
    
    # Create scatter plot
    scatter = ax.scatter(gap_df['dalys_millions'], gap_df['publications_count'], 
                        s=sizes, c=colors, alpha=0.7, edgecolors='black', linewidth=1.2)
    
    # Add research efficiency target line
    max_dalys = gap_df['dalys_millions'].max()
    target_x = np.linspace(0, max_dalys, 100)
    target_y = target_x * 10  # Target: 10 publications per million DALYs
    
    ax.plot(target_x, target_y, '--', color='green', linewidth=3, alpha=0.8,
            label='TARGET: 10 publications per million DALYs')
    
    # Highlight priority research zone
    crisis_x = np.array([10, max_dalys, max_dalys, 10])
    crisis_y = np.array([0, 0, 150, 150])  # Adjusted for 25 diseases
    ax.fill(crisis_x, crisis_y, color='red', alpha=0.1, 
            label='PRIORITY ZONE: High burden, low research')
    
    # Annotate critical diseases with smart positioning for 25 diseases
    critical_diseases = gap_df[critical_mask].nlargest(6, 'dalys_millions')  # Show top 6 for 25 diseases
    
    # Define smart offsets to avoid overlaps - better separation for more diseases
    smart_offsets = [
        (120, 80),   # First disease: further right and higher up
        (-150, 60),  # Second disease: further left and up  
        (40, 120),   # Third disease: right and much higher
        (-180, -30), # Fourth disease: further left and slightly down
        (140, -60),  # Fifth disease: further right and down
        (-50, 100),  # Sixth disease: left and up
    ]
    
    for i, (_, disease) in enumerate(critical_diseases.iterrows()):
        disease_name = disease['disease_subcategory']
        if 'Chronic Obstructive' in disease_name:
            short_name = 'COPD'
        elif 'Neglected Tropical' in disease_name:
            short_name = 'Neglected Tropical'
        elif 'Low Back Pain' in disease_name:
            short_name = 'Low Back Pain'
        elif 'Road Traffic' in disease_name:
            short_name = 'Road Accidents'
        elif 'Preterm Birth' in disease_name:
            short_name = 'Preterm Birth'
        elif len(disease_name) > 12:
            short_name = disease_name[:10] + '..'
        else:
            short_name = disease_name
        
        # Use smart offset to avoid overlaps
        offset_x, offset_y = smart_offsets[i] if i < len(smart_offsets) else (15, 15)
        
        # Clean annotation boxes with subtle arrows
        ax.annotate(f"{short_name}\n{disease['dalys_millions']:.0f}M DALYs\n{disease['publications_count']} pubs\nGap: {disease['research_gap_score']:.0f}",
                   xy=(disease['dalys_millions'], disease['publications_count']),
                   xytext=(offset_x, offset_y), textcoords='offset points',
                   bbox=dict(boxstyle='round,pad=0.4', facecolor='#fff3e0', alpha=0.95, 
                            edgecolor='#e65100', linewidth=1.5),
                   arrowprops=dict(arrowstyle='->', color='#cccccc', lw=1, alpha=0.6),
                   fontsize=8, fontweight='bold', ha='left' if offset_x > 0 else 'right', va='center',
                   color='#1a1a1a')
    
    # Style the plot
    ax.set_xlabel('Global Disease Burden (Million DALYs)', fontweight='bold')
    ax.set_ylabel('Biobank Research Publications', fontweight='bold')
    ax.set_title('CRITICAL RESEARCH GAPS IN GLOBAL HEALTH (25 DISEASES)\nBubble size proportional to disease burden (DALYs)',
                fontweight='bold', pad=20)
    
    # Custom legend
    from matplotlib.lines import Line2D
    legend_elements = [
        Line2D([0], [0], marker='o', color='w', markerfacecolor='#d63031', 
               markersize=12, label=f'CRITICAL GAP (score >{critical_threshold})', markeredgecolor='black'),
        Line2D([0], [0], marker='o', color='w', markerfacecolor='#0984e3', 
               markersize=12, label=f'ADEQUATE (score ≤{critical_threshold})', markeredgecolor='black'),
        Line2D([0], [0], color='green', linestyle='--', linewidth=3, label='Research efficiency target'),
        plt.Rectangle((0, 0), 1, 1, facecolor='red', alpha=0.1, label='Priority zone')
    ]
    
    ax.legend(handles=legend_elements, loc='upper right', frameon=True, 
             fancybox=True, shadow=True)
    
    # Crisis statistics for 25 diseases
    critical_count = critical_mask.sum()
    critical_dalys = gap_df[critical_mask]['dalys_millions'].sum()
    critical_pubs = gap_df[critical_mask]['publications_count'].sum()
    
    crisis_text = (f"RESEARCH CRISIS (25 DISEASES)\n"
                  f"• {critical_count} diseases with critical gaps\n"
                  f"• {critical_dalys:.1f}M DALYs affected\n"
                  f"• Only {critical_pubs} total publications\n"
                  f"• Efficiency: {critical_pubs/critical_dalys:.2f} studies/M DALYs\n"
                  f"• Target: {critical_dalys*10:.0f} studies needed\n"
                  f"• Expansion: +67% disease coverage")
    
    ax.text(0.02, 0.88, crisis_text, transform=ax.transAxes, fontsize=10,
            verticalalignment='top', bbox=dict(boxstyle='round,pad=0.7', facecolor='#ffcccc', alpha=0.95, edgecolor='red'),
            fontweight='bold')
    
    # Grid and limits
    ax.grid(True, alpha=0.3)
    ax.set_xlim(-2, max_dalys + 15)
    max_pubs = gap_df['publications_count'].max()
    ax.set_ylim(-max_pubs*0.05, max_pubs*1.15)
    
    plt.tight_layout()
    
    # Save files
    png_file = f'{output_prefix}_crisis.png'
    pdf_file = f'{output_prefix}_crisis.pdf'
    plt.savefig(png_file, dpi=300, bbox_inches='tight')
    plt.savefig(pdf_file, bbox_inches='tight')
    
    print(f"Crisis visualization saved: {png_file}, {pdf_file}")
    
    plt.show()
    return fig

def create_equity_comparison(gap_df, output_prefix='research_gap_25diseases'):
    """
    Create global health equity comparison visualization for 25 diseases.
    """
    
    # Define disease categories by global priority (expanded for 25 diseases)
    global_south_diseases = [
        'Malaria', 'Tuberculosis', 'HIV/AIDS', 'Neglected Tropical Diseases', 
        'Diarrheal Diseases', 'Preterm Birth Complications', 'Road Traffic Accidents'
    ]
    
    # Categorize diseases
    gap_df['global_priority'] = gap_df['disease_subcategory'].apply(
        lambda x: 'Global South Priority' if x in global_south_diseases else 'Global/High Income'
    )
    
    fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(18, 14))
    
    # 1. Research intensity by priority
    priority_stats = gap_df.groupby('global_priority').agg({
        'dalys_millions': 'sum',
        'publications_count': 'sum',
        'research_gap_score': 'mean'
    }).reset_index()
    
    priority_stats['research_intensity'] = priority_stats['publications_count'] / priority_stats['dalys_millions']
    
    bars = ax1.bar(priority_stats['global_priority'], priority_stats['research_intensity'],
                  color=['#e74c3c', '#27ae60'], alpha=0.8, edgecolor='black')
    
    ax1.set_ylabel('Publications per Million DALYs', fontweight='bold')
    ax1.set_title('Global Health Research Equity Gap\n(25 Disease Analysis)', fontweight='bold')
    ax1.set_xticklabels(priority_stats['global_priority'], rotation=45, ha='right')
    
    # Add inequality ratio
    if len(priority_stats) == 2:
        ratio = priority_stats['research_intensity'].max() / priority_stats['research_intensity'].min()
        ax1.text(0.5, 0.9, f'{ratio:.1f}x\nInequality', transform=ax1.transAxes,
                ha='center', bbox=dict(boxstyle='round', facecolor='yellow', alpha=0.8),
                fontweight='bold', fontsize=12)
    
    # Add values on bars
    for bar, value in zip(bars, priority_stats['research_intensity']):
        ax1.text(bar.get_x() + bar.get_width()/2, bar.get_height() + 0.1,
                f'{value:.1f}', ha='center', va='bottom', fontweight='bold')
    
    # 2. Top research gaps (increased for 25 diseases)
    top_gaps = gap_df.nlargest(12, 'research_gap_score')
    
    bars = ax2.barh(range(len(top_gaps)), top_gaps['research_gap_score'],
                   color='#d63031', alpha=0.8, edgecolor='black')
    
    ax2.set_yticks(range(len(top_gaps)))
    ax2.set_yticklabels([name[:20] + '...' if len(name) > 20 else name 
                        for name in top_gaps['disease_subcategory']], fontsize=9)
    ax2.set_xlabel('Research Gap Score', fontweight='bold')
    ax2.set_title('Top 12 Research Gaps\n(25 Disease Expansion)', fontweight='bold')
    ax2.invert_yaxis()
    
    # Add gap scores
    for i, (bar, score, pubs) in enumerate(zip(bars, top_gaps['research_gap_score'], top_gaps['publications_count'])):
        ax2.text(score + 1, i, f'{score:.0f}\n({pubs})', va='center', fontweight='bold', fontsize=8)
    
    # 3. Burden vs research by category (expanded categories)
    category_data = gap_df.groupby('disease_category').agg({
        'dalys_millions': 'sum',
        'publications_count': 'sum'
    }).reset_index().sort_values('publications_count', ascending=True)
    
    y_pos = np.arange(len(category_data))
    
    bars = ax3.barh(y_pos, category_data['publications_count'], 
                   color='steelblue', alpha=0.8, edgecolor='black')
    
    ax3.set_yticks(y_pos)
    ax3.set_yticklabels([cat[:18] for cat in category_data['disease_category']], fontsize=9)
    ax3.set_xlabel('Total Publications', fontweight='bold')
    ax3.set_title('Research Effort by Disease Category\n(25 Disease Categories)', fontweight='bold')
    
    # 4. Critical diseases focus (expanded for 25 diseases)
    critical_diseases = gap_df[gap_df['research_gap_score'] > 80]
    
    if len(critical_diseases) > 0:
        critical_sorted = critical_diseases.nlargest(10, 'dalys_millions')  # Top 10 for 25 diseases
        bars = ax4.barh(range(len(critical_sorted)), critical_sorted['dalys_millions'],
                       color='#d63031', alpha=0.8, edgecolor='black')
        
        ax4.set_yticks(range(len(critical_sorted)))
        ax4.set_yticklabels([name[:18] + '...' if len(name) > 18 else name 
                            for name in critical_sorted['disease_subcategory']], fontsize=9)
        ax4.set_xlabel('Disease Burden (Million DALYs)', fontweight='bold')
        ax4.set_title('Critical Gaps: High Burden, Low Research\n(Top 10 of 25 diseases)', fontweight='bold')
        ax4.invert_yaxis()
        
        # Add publication counts
        for i, (bar, pubs) in enumerate(zip(bars, critical_sorted['publications_count'])):
            ax4.text(bar.get_width() + 1, i, f'{pubs} pubs', 
                    va='center', fontweight='bold', fontsize=8)
    else:
        ax4.text(0.5, 0.5, 'No critical gaps\nidentified', ha='center', va='center',
                transform=ax4.transAxes, fontsize=14)
        ax4.set_title('Critical Research Gaps\n(25 Disease Analysis)', fontweight='bold')
    
    plt.tight_layout()
    
    # Save files
    png_file = f'{output_prefix}_equity.png'
    pdf_file = f'{output_prefix}_equity.pdf'
    plt.savefig(png_file, dpi=300, bbox_inches='tight')
    plt.savefig(pdf_file, bbox_inches='tight')
    
    print(f"Equity comparison saved: {png_file}, {pdf_file}")
    
    plt.show()
    return fig

def create_combined_crisis_equity_visualization(gap_df, summary_data, output_prefix='research_gap_25diseases'):
    """
    Create combined visualization showing both crisis and equity analysis for 25 diseases.
    """
    
    # Create figure with custom layout
    fig = plt.figure(figsize=(22, 18))
    
    # Define grid: 3 rows, 4 columns with improved spacing
    gs = fig.add_gridspec(3, 4, hspace=0.35, wspace=0.4)
    
    # Crisis visualization takes up top 2 rows, all columns
    ax_crisis = fig.add_subplot(gs[0:2, :])
    
    # Equity panels in bottom row
    ax_equity1 = fig.add_subplot(gs[2, 0])
    ax_equity2 = fig.add_subplot(gs[2, 1]) 
    ax_equity3 = fig.add_subplot(gs[2, 2])
    ax_equity4 = fig.add_subplot(gs[2, 3])
    
    # === CRISIS VISUALIZATION (TOP) ===
    critical_threshold = 80
    critical_mask = gap_df['research_gap_score'] > critical_threshold
    
    # Color coding
    colors = ['#d63031' if score > critical_threshold else '#0984e3' 
              for score in gap_df['research_gap_score']]
    
    # Bubble sizes proportional to DALYs (adjusted for 25 diseases)
    sizes = gap_df['dalys_millions'] * 6
    
    # Create scatter plot
    scatter = ax_crisis.scatter(gap_df['dalys_millions'], gap_df['publications_count'], 
                               s=sizes, c=colors, alpha=0.7, edgecolors='black', linewidth=1.2)
    
    # Add research efficiency target line
    max_dalys = gap_df['dalys_millions'].max()
    target_x = np.linspace(0, max_dalys, 100)
    target_y = target_x * 10
    
    ax_crisis.plot(target_x, target_y, '--', color='green', linewidth=3, alpha=0.8,
                  label='TARGET: 10 publications per million DALYs')
    
    # Highlight priority research zone
    crisis_x = np.array([10, max_dalys, max_dalys, 10])
    crisis_y = np.array([0, 0, 150, 150])
    ax_crisis.fill(crisis_x, crisis_y, color='red', alpha=0.1, 
                  label='PRIORITY ZONE: High burden, low research')
    
    # Annotate critical diseases with smart positioning (top 5 for space)
    critical_diseases = gap_df[critical_mask].nlargest(5, 'dalys_millions')
    
    # Define smart offsets to avoid overlaps
    smart_offsets = [
        (20, 60),   # First disease: right and higher up
        (-15, 60),  # Second disease: left and up  
        (20, 20),   # Third disease: right and up
        (-15, -70), # Fourth disease: left and down
        (15, 30),   # Fifth disease: right and up
    ]
    
    for i, (_, disease) in enumerate(critical_diseases.iterrows()):
        disease_name = disease['disease_subcategory']
        if 'Chronic Obstructive' in disease_name:
            short_name = 'COPD'
        elif 'Neglected Tropical' in disease_name:
            short_name = 'Neglected Tropical'
        elif 'Low Back Pain' in disease_name:
            short_name = 'Low Back Pain'
        elif 'Road Traffic' in disease_name:
            short_name = 'Road Accidents'
        elif len(disease_name) > 12:
            short_name = disease_name[:10] + '..'
        else:
            short_name = disease_name
        
        # Use smart offset to avoid overlaps
        offset_x, offset_y = smart_offsets[i] if i < len(smart_offsets) else (15, 15)
        
        ax_crisis.annotate(f"{short_name}\n{disease['dalys_millions']:.0f}M DALYs\n{disease['publications_count']} pubs\nGap: {disease['research_gap_score']:.0f}",
                          xy=(disease['dalys_millions'], disease['publications_count']),
                          xytext=(offset_x, offset_y), textcoords='offset points',
                          bbox=dict(boxstyle='round,pad=0.4', facecolor='#fff3e0', alpha=0.95, 
                                   edgecolor='#e65100', linewidth=1.5),
                          arrowprops=dict(arrowstyle='->', color='#cccccc', lw=1, alpha=0.6),
                          fontsize=8, fontweight='bold', ha='left' if offset_x > 0 else 'right', va='center',
                          color='#1a1a1a')
    
    # Style the main plot
    ax_crisis.set_xlabel('Global Disease Burden (Million DALYs)', fontweight='bold', fontsize=14)
    ax_crisis.set_ylabel('Biobank Research Publications', fontweight='bold', fontsize=14)
    ax_crisis.set_title('CRITICAL RESEARCH GAPS IN GLOBAL HEALTH (25 DISEASES)\nBubble size proportional to disease burden (DALYs)',
                       fontweight='bold', pad=25, fontsize=16)
    
    # Legend for main plot
    from matplotlib.lines import Line2D
    legend_elements = [
        Line2D([0], [0], marker='o', color='w', markerfacecolor='#d63031', 
               markersize=12, label=f'CRITICAL GAP (score >{critical_threshold})', markeredgecolor='black'),
        Line2D([0], [0], marker='o', color='w', markerfacecolor='#0984e3', 
               markersize=12, label=f'ADEQUATE (score ≤{critical_threshold})', markeredgecolor='black'),
        Line2D([0], [0], color='green', linestyle='--', linewidth=3, label='Research efficiency target'),
        plt.Rectangle((0, 0), 1, 1, facecolor='red', alpha=0.1, label='Priority zone')
    ]
    
    ax_crisis.legend(handles=legend_elements, loc='upper right', frameon=True, 
                    fancybox=True, shadow=True, fontsize=11)
    
    # Research gap statistics box
    critical_count = critical_mask.sum()
    critical_dalys = gap_df[critical_mask]['dalys_millions'].sum()
    critical_pubs = gap_df[critical_mask]['publications_count'].sum()
    total_diseases = len(gap_df)
    
    gap_text = (f"25-DISEASE ANALYSIS\n"
                f"• {critical_count} diseases with critical gaps\n"
                f"• {critical_dalys:.1f}M DALYs affected\n"
                f"• Only {critical_pubs} total publications\n"
                f"• Efficiency: {critical_pubs/critical_dalys:.2f} studies/M DALYs\n"
                f"• Target: {critical_dalys*10:.0f} studies needed\n"
                f"• Coverage: {total_diseases} diseases analyzed")
    
    ax_crisis.text(0.02, 0.88, gap_text, transform=ax_crisis.transAxes, fontsize=10,
                  verticalalignment='top', bbox=dict(boxstyle='round,pad=0.7', facecolor='#e3f2fd', alpha=0.95, edgecolor='#1976d2'),
                  fontweight='bold')
    
    ax_crisis.grid(True, alpha=0.3)
    ax_crisis.set_xlim(-2, max_dalys + 15)
    max_pubs = gap_df['publications_count'].max()
    ax_crisis.set_ylim(-max_pubs*0.05, max_pubs*1.15)
    
    # === EQUITY ANALYSIS (BOTTOM PANELS) ===
    
    # Define disease categories by global priority (expanded)
    global_south_diseases = [
        'Malaria', 'Tuberculosis', 'HIV/AIDS', 'Neglected Tropical Diseases', 
        'Diarrheal Diseases', 'Preterm Birth Complications', 'Road Traffic Accidents'
    ]
    
    gap_df['global_priority'] = gap_df['disease_subcategory'].apply(
        lambda x: 'Global South' if x in global_south_diseases else 'Global/High Income'
    )
    
    # Panel 1: Research intensity by priority
    priority_stats = gap_df.groupby('global_priority').agg({
        'dalys_millions': 'sum',
        'publications_count': 'sum',
        'research_gap_score': 'mean'
    }).reset_index()
    
    priority_stats['research_intensity'] = priority_stats['publications_count'] / priority_stats['dalys_millions']
    
    bars = ax_equity1.bar(priority_stats['global_priority'], priority_stats['research_intensity'],
                         color=['#e74c3c', '#27ae60'], alpha=0.8, edgecolor='black')
    
    ax_equity1.set_ylabel('Pubs per Million DALYs', fontweight='bold', fontsize=10)
    ax_equity1.set_title('A. Global Health Equity Gap\n(25 Diseases)', fontweight='bold', fontsize=12)
    ax_equity1.set_xticklabels(priority_stats['global_priority'], rotation=45, ha='right', fontsize=9)
    
    # Add inequality ratio
    if len(priority_stats) == 2:
        ratio = priority_stats['research_intensity'].max() / priority_stats['research_intensity'].min()
        ax_equity1.text(0.5, 0.9, f'{ratio:.1f}x\nInequality', transform=ax_equity1.transAxes,
                       ha='center', bbox=dict(boxstyle='round', facecolor='yellow', alpha=0.8),
                       fontweight='bold', fontsize=10)
    
    # Panel 2: Top research gaps
    top_gaps = gap_df.nlargest(10, 'research_gap_score')
    
    bars = ax_equity2.barh(range(len(top_gaps)), top_gaps['research_gap_score'],
                          color='#d63031', alpha=0.8, edgecolor='black')
    
    ax_equity2.set_yticks(range(len(top_gaps)))
    ax_equity2.set_yticklabels([name[:12] + '...' if len(name) > 12 else name 
                               for name in top_gaps['disease_subcategory']], fontsize=7)
    ax_equity2.set_xlabel('Research Gap Score', fontweight='bold', fontsize=10)
    ax_equity2.set_title('B. Top Research Gaps\n(25 Diseases)', fontweight='bold', fontsize=12)
    ax_equity2.invert_yaxis()
    
    # Panel 3: Research effort by category (top categories)
    category_data = gap_df.groupby('disease_category').agg({
        'dalys_millions': 'sum',
        'publications_count': 'sum'
    }).reset_index().sort_values('publications_count', ascending=True).tail(10)
    
    y_pos = np.arange(len(category_data))
    bars = ax_equity3.barh(y_pos, category_data['publications_count'], 
                          color='steelblue', alpha=0.8, edgecolor='black')
    
    ax_equity3.set_yticks(y_pos)
    ax_equity3.set_yticklabels([cat[:12] for cat in category_data['disease_category']], fontsize=7)
    ax_equity3.set_xlabel('Total Publications', fontweight='bold', fontsize=10)
    ax_equity3.set_title('C. Research by Category\n(25 Diseases)', fontweight='bold', fontsize=12)
    
    # Panel 4: Critical diseases focus
    critical_diseases_panel = gap_df[gap_df['research_gap_score'] > 80].nlargest(8, 'dalys_millions')
    
    if len(critical_diseases_panel) > 0:
        bars = ax_equity4.barh(range(len(critical_diseases_panel)), critical_diseases_panel['dalys_millions'],
                              color='#d63031', alpha=0.8, edgecolor='black')
        
        ax_equity4.set_yticks(range(len(critical_diseases_panel)))
        ax_equity4.set_yticklabels([name[:12] + '...' if len(name) > 12 else name 
                                   for name in critical_diseases_panel['disease_subcategory']], fontsize=7)
        ax_equity4.set_xlabel('Disease Burden (M DALYs)', fontweight='bold', fontsize=10)
        ax_equity4.set_title('D. Critical Gaps Detail\n(25 Diseases)', fontweight='bold', fontsize=12)
        ax_equity4.invert_yaxis()
        
        # Add publication counts
        for i, (bar, pubs) in enumerate(zip(bars, critical_diseases_panel['publications_count'])):
            ax_equity4.text(bar.get_width() + 1, i, f'{pubs}', 
                           va='center', fontweight='bold', fontsize=7)
    
    # Overall title
    fig.suptitle('RESEARCH GAPS IN GLOBAL HEALTH: 25-DISEASE PRIORITY AREAS & EQUITY ANALYSIS', 
                fontsize=20, fontweight='bold', y=0.95)
    
    # Save files
    png_file = f'{output_prefix}_priority_areas_equity.png'
    pdf_file = f'{output_prefix}_priority_areas_equity.pdf'
    plt.savefig(png_file, dpi=300, bbox_inches='tight')
    plt.savefig(pdf_file, bbox_inches='tight')
    
    print(f"Priority areas & equity visualization saved: {png_file}, {pdf_file}")
    
    plt.show()
    return fig

def create_new_diseases_analysis(gap_df, output_prefix='research_gap_25diseases'):
    """
    Create visualization highlighting the 10 new diseases added in the expansion.
    """
    
    # Identify the 10 new diseases (these were added in the 25-disease expansion)
    new_diseases = [
        'Chronic Kidney Disease', 'Diarrheal Diseases', 'Road Traffic Accidents',
        'Cirrhosis', 'Asthma', 'Colorectal Cancer', 'Preterm Birth Complications',
        'Cataracts', 'Rheumatoid Arthritis', 'Bipolar Disorder'
    ]
    
    # Filter for new diseases
    new_disease_df = gap_df[gap_df['disease_subcategory'].isin(new_diseases)].copy()
    original_disease_df = gap_df[~gap_df['disease_subcategory'].isin(new_diseases)].copy()
    
    fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(18, 14))
    
    # 1. New diseases burden vs research
    scatter = ax1.scatter(new_disease_df['dalys_millions'], new_disease_df['publications_count'],
                         s=new_disease_df['dalys_millions']*8, c=new_disease_df['research_gap_score'],
                         cmap='Reds', alpha=0.8, edgecolors='black', linewidth=1.5)
    
    # Annotate each new disease
    for _, disease in new_disease_df.iterrows():
        ax1.annotate(disease['disease_subcategory'][:15], 
                    (disease['dalys_millions'], disease['publications_count']),
                    xytext=(5, 5), textcoords='offset points', fontsize=8,
                    bbox=dict(boxstyle='round,pad=0.3', facecolor='lightblue', alpha=0.7))
    
    ax1.set_xlabel('Disease Burden (Million DALYs)', fontweight='bold')
    ax1.set_ylabel('Research Publications', fontweight='bold')
    ax1.set_title('A. New Diseases Added in 25-Disease Expansion\n(Bubble size = burden, color = gap severity)', 
                 fontweight='bold')
    ax1.grid(True, alpha=0.3)
    
    cbar1 = plt.colorbar(scatter, ax=ax1)
    cbar1.set_label('Research Gap Score', fontweight='bold')
    
    # 2. Research gaps comparison: new vs original diseases
    new_gaps = new_disease_df['research_gap_score'].mean()
    original_gaps = original_disease_df['research_gap_score'].mean()
    
    categories = ['Original 15\nDiseases', 'New 10\nDiseases']
    gap_scores = [original_gaps, new_gaps]
    colors = ['lightcoral', 'lightblue']
    
    bars = ax2.bar(categories, gap_scores, color=colors, alpha=0.8, edgecolor='black')
    ax2.set_ylabel('Average Research Gap Score', fontweight='bold')
    ax2.set_title('B. Research Gap Comparison\n(Original vs New Diseases)', fontweight='bold')
    
    # Add values on bars
    for bar, value in zip(bars, gap_scores):
        ax2.text(bar.get_x() + bar.get_width()/2, bar.get_height() + 1,
                f'{value:.1f}', ha='center', va='bottom', fontweight='bold')
    
    # 3. New disease categories added
    new_categories = new_disease_df['disease_category'].value_counts()
    
    wedges, texts, autotexts = ax3.pie(new_categories.values, labels=new_categories.index,
                                      autopct='%1.0f%%', startangle=90, colors=plt.cm.Set3.colors)
    ax3.set_title('C. New Disease Categories Added\n(Distribution of 10 new diseases)', fontweight='bold')
    
    # 4. Global South representation improvement
    global_south_diseases = [
        'Diarrheal Diseases', 'Preterm Birth Complications', 'Road Traffic Accidents'
    ]
    
    new_global_south = new_disease_df[new_disease_df['disease_subcategory'].isin(global_south_diseases)]
    
    if len(new_global_south) > 0:
        bars = ax4.barh(range(len(new_global_south)), new_global_south['dalys_millions'],
                       color='orange', alpha=0.8, edgecolor='black')
        
        ax4.set_yticks(range(len(new_global_south)))
        ax4.set_yticklabels(new_global_south['disease_subcategory'], fontsize=10)
        ax4.set_xlabel('Disease Burden (Million DALYs)', fontweight='bold')
        ax4.set_title('D. Enhanced Global South Representation\n(New diseases affecting developing regions)', 
                     fontweight='bold')
        ax4.invert_yaxis()
        
        # Add publication counts
        for i, (bar, pubs) in enumerate(zip(bars, new_global_south['publications_count'])):
            ax4.text(bar.get_width() + 1, i, f'{pubs} pubs', 
                    va='center', fontweight='bold', fontsize=9)
    else:
        ax4.text(0.5, 0.5, 'Global South\nDiseases Analysis', 
                ha='center', va='center', transform=ax4.transAxes, fontsize=12)
    
    plt.tight_layout()
    
    # Save files
    png_file = f'{output_prefix}_new_diseases_analysis.png'
    pdf_file = f'{output_prefix}_new_diseases_analysis.pdf'
    plt.savefig(png_file, dpi=300, bbox_inches='tight')
    plt.savefig(pdf_file, bbox_inches='tight')
    
    print(f"New diseases analysis saved: {png_file}, {pdf_file}")
    
    plt.show()
    return fig

def main():
    """
    Main function to generate all visualizations from your actual 25-disease data files.
    """
    print("Creating Publication-Ready Research Gap Visualizations - 25 DISEASES VERSION")
    print("=" * 80)
    
    # Load data
    gap_df, effort_df, summary_data = load_research_gap_data()
    
    if gap_df is None:
        print("Could not load data files. Please check file paths and run 01-00-research-gap-discovery.py first.")
        return
    
    # Print data summary
    print(f"\nDATA SUMMARY (25-DISEASE EXPANSION):")
    print(f"   • Total diseases analyzed: {len(gap_df)}")
    print(f"   • Critical gaps (score >80): {len(gap_df[gap_df['research_gap_score'] > 80])}")
    print(f"   • Total DALYs: {gap_df['dalys_millions'].sum():.1f} million")
    print(f"   • Total publications: {gap_df['publications_count'].sum():,}")
    print(f"   • Disease categories: {len(gap_df['disease_category'].unique())}")
    print(f"   • Data sources: {len(gap_df['data_source'].unique())}")
    if summary_data:
        print(f"   • Analysis date: {summary_data.get('analysis_date', 'Unknown')}")
        print(f"   • Expansion note: {summary_data.get('expansion_note', 'Not specified')}")
    
    # Create output directory
    output_dir = Path('./ANALYSIS/01-01-DATA-VIZ/')
    output_dir.mkdir(parents=True, exist_ok=True)
    
    print(f"\nSaving figures to: {output_dir}")
    
    # Generate visualizations
    output_prefix = str(output_dir / 'research_gap_25diseases')
    
    print("\n1. Creating combined crisis & equity visualization...")
    create_combined_crisis_equity_visualization(gap_df, summary_data, output_prefix)
    
    print("\n2. Creating crisis visualization...")
    create_crisis_visualization(gap_df, output_prefix)
    
    print("\n3. Creating equity comparison...")
    create_equity_comparison(gap_df, output_prefix)
    
    print("\n4. Creating new diseases analysis...")
    create_new_diseases_analysis(gap_df, output_prefix)
    
    print(f"\nVISUALIZATION COMPLETE!")
    print(f"Files saved in: ANALYSIS/01-01-DATA-VIZ/")
    print(f"   • research_gap_25diseases_priority_areas_equity.png/pdf")
    print(f"   • research_gap_25diseases_crisis.png/pdf")
    print(f"   • research_gap_25diseases_equity.png/pdf")
    print(f"   • research_gap_25diseases_new_diseases_analysis.png/pdf")
    
    print(f"\nPUBLICATION-READY HIGHLIGHTS (25 DISEASES):")
    print(f"   • Comprehensive 25-disease analysis")
    print(f"   • Critical under-research in high-burden diseases")
    print(f"   • Enhanced global health equity representation")
    print(f"   • 67% increase in disease coverage from expansion")
    print(f"   • Research investment priorities clearly identified")
    print(f"   • Analysis of 10 newly added diseases")

if __name__ == "__main__":
    main()